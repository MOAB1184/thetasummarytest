{"ast":null,"code":"import AWS from 'aws-sdk';\n\n// Initialize the Wasabi storage service\n// Note: In a real implementation, these credentials would be stored securely \n// and potentially fetched from environment variables or a backend service\nclass WasabiStorage {\n  constructor() {\n    console.log('========== WASABI STORAGE INITIALIZED ==========');\n    console.log('USING WASABI CLOUD STORAGE - NOT USING LOCALSTORAGE');\n    console.log(`Bucket: thetatest, Endpoint: https://s3.us-west-1.wasabisys.com`);\n\n    // Configure the Wasabi connection\n    this.s3 = new AWS.S3({\n      endpoint: 'https://s3.us-west-1.wasabisys.com',\n      accessKeyId: 'W7X9U7PACFCWQZHRJBRH',\n      secretAccessKey: 'Xc3tkWt1W0tGSMhEN3w6WTPJNsOlWYuhtirgV9Dc',\n      region: 'us-west-1',\n      s3ForcePathStyle: true // Required for Wasabi\n    });\n    this.bucket = 'thetatest';\n\n    // Initialize base folders\n    this.initializeFolders();\n\n    // Never fall back to localStorage\n    this.useLocalStorage = false;\n\n    // Test connection during initialization but don't fall back\n    this.testConnection();\n    console.log('==============================================');\n  }\n\n  // Initialize the folder structure\n  async initializeFolders() {\n    try {\n      const folders = ['teacher-approval/', 'student-approval/', 'Skyline/', 'Skyline/teachers/', 'Skyline/students/'];\n      await Promise.all(folders.map(folder => this.s3.putObject({\n        Bucket: this.bucket,\n        Key: folder,\n        Body: '',\n        ContentType: 'application/x-directory'\n      }).promise()));\n      return true;\n    } catch (error) {\n      console.error('Error initializing folders:', error);\n      return false;\n    }\n  }\n\n  // Path helpers\n  getTeacherPath(email) {\n    return `Skyline/teachers/${email}/${email}.json`;\n  }\n  getPendingTeacherPath(email) {\n    return `teacher-approval/${email}.json`;\n  }\n  getPendingStudentPath(email) {\n    return `student-approval/${email}.json`;\n  }\n  getStudentPath(email) {\n    return `Skyline/students/${email}.json`;\n  }\n  getTeacherClassesPath(email) {\n    return `Skyline/teachers/${email}/classes/`;\n  }\n  getClassPath(teacherEmail, classCode) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/info.json`;\n  }\n  getRecordingsPath(teacherEmail, classCode) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/recordings/`;\n  }\n  getRecordingPath(teacherEmail, classCode, recordingId) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/recordings/${recordingId}.json`;\n  }\n  getSummariesPath(teacherEmail, classCode) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/summaries/`;\n  }\n  getSummaryPath(teacherEmail, classCode, summaryId) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/summaries/${summaryId}.json`;\n  }\n  getClassJoinRequestPath(teacherEmail, classCode, studentEmail) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/join-requests/${studentEmail}.json`;\n  }\n  getSchoolPath(schoolName) {\n    return `schools/${schoolName}.json`;\n  }\n\n  // Test the Wasabi connection\n  async testConnection() {\n    try {\n      console.log('Testing Wasabi connection...');\n      // Check if bucket exists\n      const response = await this.s3.headBucket({\n        Bucket: this.bucket\n      }).promise();\n      console.log('Wasabi connection successful:', response);\n      return true;\n    } catch (error) {\n      console.error('Wasabi connection test failed:', error.message, error.code);\n      // Don't fall back to localStorage - just report the error\n      console.error('WARNING: Wasabi storage is not working but fallback is disabled');\n      return false;\n    }\n  }\n\n  // Save data to Wasabi\n  async saveData(key, data) {\n    try {\n      console.log(`Attempting to save data to Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n        Body: JSON.stringify(data),\n        ContentType: 'application/json'\n      };\n      const response = await this.s3.putObject(params).promise();\n      console.log('Wasabi save successful:', response);\n      return {\n        success: true,\n        response\n      };\n    } catch (error) {\n      console.error('Detailed error saving to Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to save to Wasabi: ${error.message}`);\n    }\n  }\n\n  // Get binary data from Wasabi (for files like ZIP)\n  async getBinaryData(key) {\n    try {\n      console.log(`Attempting to get binary data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key\n      };\n      const response = await this.s3.getObject(params).promise();\n      console.log('Wasabi get successful');\n      return response.Body;\n    } catch (error) {\n      if (error.code === 'NoSuchKey') {\n        console.log('Key not found in Wasabi, returning null');\n        return null;\n      }\n      console.error('Detailed error getting from Wasabi:', error.message, error.code, error.statusCode);\n      throw new Error(`Failed to get data from Wasabi: ${error.message}`);\n    }\n  }\n\n  // Get data from Wasabi\n  async getData(key) {\n    try {\n      console.log(`Attempting to get data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key\n      };\n      const response = await this.s3.getObject(params).promise();\n      console.log('Wasabi get successful');\n\n      // If the key ends with .json, parse it as JSON\n      if (key.endsWith('.json')) {\n        return JSON.parse(response.Body.toString());\n      }\n      // Otherwise return the raw buffer\n      return response.Body;\n    } catch (error) {\n      if (error.code === 'NoSuchKey') {\n        console.log('Key not found in Wasabi, returning null');\n        return null;\n      }\n      console.error('Detailed error getting from Wasabi:', error.message, error.code, error.statusCode);\n      throw new Error(`Failed to get data from Wasabi: ${error.message}`);\n    }\n  }\n\n  // Update specific data in Wasabi\n  async updateData(key, updateFunction) {\n    let data = await this.getData(key);\n\n    // If data doesn't exist yet, initialize with empty object or array\n    if (!data) {\n      data = typeof updateFunction(null) === 'object' ? {} : [];\n    }\n\n    // Apply the update function to modify the data\n    const updatedData = updateFunction(data);\n\n    // Save the updated data back to Wasabi\n    return await this.saveData(key, updatedData);\n  }\n\n  // Delete data from Wasabi\n  async deleteData(key) {\n    try {\n      console.log(`Attempting to delete data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key\n      };\n      const response = await this.s3.deleteObject(params).promise();\n      console.log('Wasabi delete successful:', response);\n      return {\n        success: true,\n        response\n      };\n    } catch (error) {\n      console.error('Detailed error deleting from Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to delete from Wasabi: ${error.message}`);\n    }\n  }\n  async listObjects(prefix) {\n    const data = await this.s3.listObjectsV2({\n      Bucket: this.bucket,\n      Prefix: prefix\n    }).promise();\n    return data.Contents || [];\n  }\n  async deleteObject(key) {\n    await this.s3.deleteObject({\n      Bucket: this.bucket,\n      Key: key\n    }).promise();\n  }\n\n  // Move an object from one location to another\n  async moveObject(fromKey, toKey) {\n    try {\n      // Copy the object to the new location\n      await this.s3.copyObject({\n        Bucket: this.bucket,\n        CopySource: `${this.bucket}/${fromKey}`,\n        Key: toKey\n      }).promise();\n\n      // Delete the object from the old location\n      await this.deleteObject(fromKey);\n      console.log(`Successfully moved object from ${fromKey} to ${toKey}`);\n    } catch (error) {\n      console.error('Error moving object:', error);\n      throw error;\n    }\n  }\n  async getSummaries(teacherEmail, classCode) {\n    try {\n      const summariesPath = this.getSummariesPath(teacherEmail, classCode);\n      const summariesData = await this.listObjects(summariesPath);\n      const summaries = [];\n      for (const summary of summariesData) {\n        if (summary.Key.endsWith('.tex')) {\n          const content = await this.getData(summary.Key);\n          if (content) {\n            const fileName = summary.Key.split('/').pop().replace('.tex', '');\n            summaries.push({\n              id: summary.Key,\n              fileName: fileName,\n              content: content,\n              timestamp: summary.LastModified,\n              type: 'tex'\n            });\n          }\n        }\n      }\n\n      // Sort summaries by date, newest first\n      summaries.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      return summaries;\n    } catch (error) {\n      console.error('Error getting summaries:', error);\n      return [];\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst wasabiStorage = new WasabiStorage();\nexport default wasabiStorage;","map":{"version":3,"names":["AWS","WasabiStorage","constructor","console","log","s3","S3","endpoint","accessKeyId","secretAccessKey","region","s3ForcePathStyle","bucket","initializeFolders","useLocalStorage","testConnection","folders","Promise","all","map","folder","putObject","Bucket","Key","Body","ContentType","promise","error","getTeacherPath","email","getPendingTeacherPath","getPendingStudentPath","getStudentPath","getTeacherClassesPath","getClassPath","teacherEmail","classCode","getRecordingsPath","getRecordingPath","recordingId","getSummariesPath","getSummaryPath","summaryId","getClassJoinRequestPath","studentEmail","getSchoolPath","schoolName","response","headBucket","message","code","saveData","key","data","params","JSON","stringify","success","statusCode","Error","getBinaryData","getObject","getData","endsWith","parse","toString","updateData","updateFunction","updatedData","deleteData","deleteObject","listObjects","prefix","listObjectsV2","Prefix","Contents","moveObject","fromKey","toKey","copyObject","CopySource","getSummaries","summariesPath","summariesData","summaries","summary","content","fileName","split","pop","replace","push","id","timestamp","LastModified","type","sort","a","b","Date","wasabiStorage"],"sources":["D:/dadas/he true randomizer/theta/my-app/src/services/WasabiStorage.js"],"sourcesContent":["import AWS from 'aws-sdk';\n\n// Initialize the Wasabi storage service\n// Note: In a real implementation, these credentials would be stored securely \n// and potentially fetched from environment variables or a backend service\nclass WasabiStorage {\n  constructor() {\n    console.log('========== WASABI STORAGE INITIALIZED ==========');\n    console.log('USING WASABI CLOUD STORAGE - NOT USING LOCALSTORAGE');\n    console.log(`Bucket: thetatest, Endpoint: https://s3.us-west-1.wasabisys.com`);\n    \n    // Configure the Wasabi connection\n    this.s3 = new AWS.S3({\n      endpoint: 'https://s3.us-west-1.wasabisys.com',\n      accessKeyId: 'W7X9U7PACFCWQZHRJBRH',\n      secretAccessKey: 'Xc3tkWt1W0tGSMhEN3w6WTPJNsOlWYuhtirgV9Dc',\n      region: 'us-west-1',\n      s3ForcePathStyle: true, // Required for Wasabi\n    });\n    \n    this.bucket = 'thetatest';\n\n    // Initialize base folders\n    this.initializeFolders();\n    \n    // Never fall back to localStorage\n    this.useLocalStorage = false;\n    \n    // Test connection during initialization but don't fall back\n    this.testConnection();\n    \n    console.log('==============================================');\n  }\n  \n  // Initialize the folder structure\n  async initializeFolders() {\n    try {\n      const folders = [\n        'teacher-approval/',\n        'student-approval/',\n        'Skyline/',\n        'Skyline/teachers/',\n        'Skyline/students/'\n      ];\n\n      await Promise.all(folders.map(folder => \n        this.s3.putObject({\n          Bucket: this.bucket,\n          Key: folder,\n          Body: '',\n          ContentType: 'application/x-directory'\n        }).promise()\n      ));\n\n      return true;\n    } catch (error) {\n      console.error('Error initializing folders:', error);\n      return false;\n    }\n  }\n\n  // Path helpers\n  getTeacherPath(email) {\n    return `Skyline/teachers/${email}/${email}.json`;\n  }\n\n  getPendingTeacherPath(email) {\n    return `teacher-approval/${email}.json`;\n  }\n\n  getPendingStudentPath(email) {\n    return `student-approval/${email}.json`;\n  }\n\n  getStudentPath(email) {\n    return `Skyline/students/${email}.json`;\n  }\n\n  getTeacherClassesPath(email) {\n    return `Skyline/teachers/${email}/classes/`;\n  }\n\n  getClassPath(teacherEmail, classCode) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/info.json`;\n  }\n\n  getRecordingsPath(teacherEmail, classCode) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/recordings/`;\n  }\n\n  getRecordingPath(teacherEmail, classCode, recordingId) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/recordings/${recordingId}.json`;\n  }\n\n  getSummariesPath(teacherEmail, classCode) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/summaries/`;\n  }\n\n  getSummaryPath(teacherEmail, classCode, summaryId) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/summaries/${summaryId}.json`;\n  }\n\n  getClassJoinRequestPath(teacherEmail, classCode, studentEmail) {\n    return `Skyline/teachers/${teacherEmail}/classes/${classCode}/join-requests/${studentEmail}.json`;\n  }\n\n  getSchoolPath(schoolName) {\n    return `schools/${schoolName}.json`;\n  }\n\n  // Test the Wasabi connection\n  async testConnection() {\n    try {\n      console.log('Testing Wasabi connection...');\n      // Check if bucket exists\n      const response = await this.s3.headBucket({ Bucket: this.bucket }).promise();\n      console.log('Wasabi connection successful:', response);\n      return true;\n    } catch (error) {\n      console.error('Wasabi connection test failed:', error.message, error.code);\n      // Don't fall back to localStorage - just report the error\n      console.error('WARNING: Wasabi storage is not working but fallback is disabled');\n      return false;\n    }\n  }\n  \n  // Save data to Wasabi\n  async saveData(key, data) {\n    try {\n      console.log(`Attempting to save data to Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n        Body: JSON.stringify(data),\n        ContentType: 'application/json',\n      };\n      \n      const response = await this.s3.putObject(params).promise();\n      console.log('Wasabi save successful:', response);\n      return { success: true, response };\n    } catch (error) {\n      console.error('Detailed error saving to Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to save to Wasabi: ${error.message}`);\n    }\n  }\n  \n  // Get binary data from Wasabi (for files like ZIP)\n  async getBinaryData(key) {\n    try {\n      console.log(`Attempting to get binary data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n      };\n      \n      const response = await this.s3.getObject(params).promise();\n      console.log('Wasabi get successful');\n      return response.Body;\n    } catch (error) {\n      if (error.code === 'NoSuchKey') {\n        console.log('Key not found in Wasabi, returning null');\n        return null;\n      }\n      console.error('Detailed error getting from Wasabi:', error.message, error.code, error.statusCode);\n      throw new Error(`Failed to get data from Wasabi: ${error.message}`);\n    }\n  }\n\n  // Get data from Wasabi\n  async getData(key) {\n    try {\n      console.log(`Attempting to get data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n      };\n      \n      const response = await this.s3.getObject(params).promise();\n      console.log('Wasabi get successful');\n      \n      // If the key ends with .json, parse it as JSON\n      if (key.endsWith('.json')) {\n        return JSON.parse(response.Body.toString());\n      }\n      // Otherwise return the raw buffer\n      return response.Body;\n    } catch (error) {\n      if (error.code === 'NoSuchKey') {\n        console.log('Key not found in Wasabi, returning null');\n        return null;\n      }\n      console.error('Detailed error getting from Wasabi:', error.message, error.code, error.statusCode);\n      throw new Error(`Failed to get data from Wasabi: ${error.message}`);\n    }\n  }\n  \n  // Update specific data in Wasabi\n  async updateData(key, updateFunction) {\n    let data = await this.getData(key);\n    \n    // If data doesn't exist yet, initialize with empty object or array\n    if (!data) {\n      data = typeof updateFunction(null) === 'object' ? {} : [];\n    }\n    \n    // Apply the update function to modify the data\n    const updatedData = updateFunction(data);\n    \n    // Save the updated data back to Wasabi\n    return await this.saveData(key, updatedData);\n  }\n  \n  // Delete data from Wasabi\n  async deleteData(key) {\n    try {\n      console.log(`Attempting to delete data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n      };\n      \n      const response = await this.s3.deleteObject(params).promise();\n      console.log('Wasabi delete successful:', response);\n      return { success: true, response };\n    } catch (error) {\n      console.error('Detailed error deleting from Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to delete from Wasabi: ${error.message}`);\n    }\n  }\n\n  async listObjects(prefix) {\n    const data = await this.s3.listObjectsV2({\n      Bucket: this.bucket,\n      Prefix: prefix\n    }).promise();\n    return data.Contents || [];\n  }\n\n  async deleteObject(key) {\n    await this.s3.deleteObject({\n      Bucket: this.bucket,\n      Key: key\n    }).promise();\n  }\n\n  // Move an object from one location to another\n  async moveObject(fromKey, toKey) {\n    try {\n      // Copy the object to the new location\n      await this.s3.copyObject({\n        Bucket: this.bucket,\n        CopySource: `${this.bucket}/${fromKey}`,\n        Key: toKey\n      }).promise();\n\n      // Delete the object from the old location\n      await this.deleteObject(fromKey);\n\n      console.log(`Successfully moved object from ${fromKey} to ${toKey}`);\n    } catch (error) {\n      console.error('Error moving object:', error);\n      throw error;\n    }\n  }\n\n  async getSummaries(teacherEmail, classCode) {\n    try {\n      const summariesPath = this.getSummariesPath(teacherEmail, classCode);\n      const summariesData = await this.listObjects(summariesPath);\n      const summaries = [];\n\n      for (const summary of summariesData) {\n        if (summary.Key.endsWith('.tex')) {\n          const content = await this.getData(summary.Key);\n          if (content) {\n            const fileName = summary.Key.split('/').pop().replace('.tex', '');\n            summaries.push({\n              id: summary.Key,\n              fileName: fileName,\n              content: content,\n              timestamp: summary.LastModified,\n              type: 'tex'\n            });\n          }\n        }\n      }\n\n      // Sort summaries by date, newest first\n      summaries.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      return summaries;\n    } catch (error) {\n      console.error('Error getting summaries:', error);\n      return [];\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst wasabiStorage = new WasabiStorage();\nexport default wasabiStorage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}