{"ast":null,"code":"import AWS from 'aws-sdk';\n\n// Initialize the Wasabi storage service\n// Note: In a real implementation, these credentials would be stored securely \n// and potentially fetched from environment variables or a backend service\nclass WasabiStorage {\n  constructor() {\n    console.log('========== WASABI STORAGE INITIALIZED ==========');\n    console.log('USING WASABI CLOUD STORAGE - NOT USING LOCALSTORAGE');\n    console.log(`Bucket: thetatest, Endpoint: https://s3.us-west-1.wasabisys.com`);\n\n    // Configure the Wasabi connection\n    this.s3 = new AWS.S3({\n      endpoint: 'https://s3.us-west-1.wasabisys.com',\n      accessKeyId: 'W7X9U7PACFCWQZHRJBRH',\n      secretAccessKey: 'Xc3tkWt1W0tGSMhEN3w6WTPJNsOlWYuhtirgV9Dc',\n      region: 'us-west-1',\n      s3ForcePathStyle: true // Required for Wasabi\n    });\n    this.bucket = 'thetatest';\n\n    // Never fall back to localStorage\n    this.useLocalStorage = false;\n\n    // Test connection during initialization but don't fall back\n    this.testConnection();\n    console.log('==============================================');\n  }\n\n  // Test the Wasabi connection\n  async testConnection() {\n    try {\n      console.log('Testing Wasabi connection...');\n      // Check if bucket exists\n      const response = await this.s3.headBucket({\n        Bucket: this.bucket\n      }).promise();\n      console.log('Wasabi connection successful:', response);\n      return true;\n    } catch (error) {\n      console.error('Wasabi connection test failed:', error.message, error.code);\n      // Don't fall back to localStorage - just report the error\n      console.error('WARNING: Wasabi storage is not working but fallback is disabled');\n      return false;\n    }\n  }\n\n  // Save data to Wasabi\n  async saveData(key, data) {\n    try {\n      console.log(`Attempting to save data to Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n        Body: JSON.stringify(data),\n        ContentType: 'application/json'\n      };\n      const response = await this.s3.putObject(params).promise();\n      console.log('Wasabi save successful:', response);\n      return {\n        success: true,\n        response\n      };\n    } catch (error) {\n      console.error('Detailed error saving to Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to save to Wasabi: ${error.message}`);\n    }\n  }\n\n  // Get data from Wasabi\n  async getData(key) {\n    try {\n      console.log(`Attempting to get data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key\n      };\n      const response = await this.s3.getObject(params).promise();\n      console.log('Wasabi get successful');\n      return JSON.parse(response.Body.toString());\n    } catch (error) {\n      // If the object doesn't exist, return null instead of throwing an error\n      if (error.code === 'NoSuchKey') {\n        console.log('Key not found in Wasabi, returning null');\n        return null;\n      }\n      console.error('Detailed error getting from Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to get data from Wasabi: ${error.message}`);\n    }\n  }\n\n  // Update specific data in Wasabi\n  async updateData(key, updateFunction) {\n    let data = await this.getData(key);\n\n    // If data doesn't exist yet, initialize with empty object or array\n    if (!data) {\n      data = typeof updateFunction(null) === 'object' ? {} : [];\n    }\n\n    // Apply the update function to modify the data\n    const updatedData = updateFunction(data);\n\n    // Save the updated data back to Wasabi\n    return await this.saveData(key, updatedData);\n  }\n\n  // Delete data from Wasabi\n  async deleteData(key) {\n    try {\n      console.log(`Attempting to delete data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key\n      };\n      const response = await this.s3.deleteObject(params).promise();\n      console.log('Wasabi delete successful:', response);\n      return {\n        success: true,\n        response\n      };\n    } catch (error) {\n      console.error('Detailed error deleting from Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to delete from Wasabi: ${error.message}`);\n    }\n  }\n  async listObjects(prefix) {\n    const data = await this.s3.listObjectsV2({\n      Bucket: this.bucket,\n      Prefix: prefix\n    }).promise();\n    return data.Contents;\n  }\n  async deleteObject(key) {\n    await this.s3.deleteObject({\n      Bucket: this.bucket,\n      Key: key\n    }).promise();\n  }\n}\n\n// Create and export a singleton instance\nconst wasabiStorage = new WasabiStorage();\nexport default wasabiStorage;","map":{"version":3,"names":["AWS","WasabiStorage","constructor","console","log","s3","S3","endpoint","accessKeyId","secretAccessKey","region","s3ForcePathStyle","bucket","useLocalStorage","testConnection","response","headBucket","Bucket","promise","error","message","code","saveData","key","data","params","Key","Body","JSON","stringify","ContentType","putObject","success","statusCode","Error","getData","getObject","parse","toString","updateData","updateFunction","updatedData","deleteData","deleteObject","listObjects","prefix","listObjectsV2","Prefix","Contents","wasabiStorage"],"sources":["D:/dadas/he true randomizer/theta/my-app/src/services/WasabiStorage.js"],"sourcesContent":["import AWS from 'aws-sdk';\n\n// Initialize the Wasabi storage service\n// Note: In a real implementation, these credentials would be stored securely \n// and potentially fetched from environment variables or a backend service\nclass WasabiStorage {\n  constructor() {\n    console.log('========== WASABI STORAGE INITIALIZED ==========');\n    console.log('USING WASABI CLOUD STORAGE - NOT USING LOCALSTORAGE');\n    console.log(`Bucket: thetatest, Endpoint: https://s3.us-west-1.wasabisys.com`);\n    \n    // Configure the Wasabi connection\n    this.s3 = new AWS.S3({\n      endpoint: 'https://s3.us-west-1.wasabisys.com',\n      accessKeyId: 'W7X9U7PACFCWQZHRJBRH',\n      secretAccessKey: 'Xc3tkWt1W0tGSMhEN3w6WTPJNsOlWYuhtirgV9Dc',\n      region: 'us-west-1',\n      s3ForcePathStyle: true, // Required for Wasabi\n    });\n    \n    this.bucket = 'thetatest';\n    \n    // Never fall back to localStorage\n    this.useLocalStorage = false;\n    \n    // Test connection during initialization but don't fall back\n    this.testConnection();\n    \n    console.log('==============================================');\n  }\n  \n  // Test the Wasabi connection\n  async testConnection() {\n    try {\n      console.log('Testing Wasabi connection...');\n      // Check if bucket exists\n      const response = await this.s3.headBucket({ Bucket: this.bucket }).promise();\n      console.log('Wasabi connection successful:', response);\n      return true;\n    } catch (error) {\n      console.error('Wasabi connection test failed:', error.message, error.code);\n      // Don't fall back to localStorage - just report the error\n      console.error('WARNING: Wasabi storage is not working but fallback is disabled');\n      return false;\n    }\n  }\n  \n  // Save data to Wasabi\n  async saveData(key, data) {\n    try {\n      console.log(`Attempting to save data to Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n        Body: JSON.stringify(data),\n        ContentType: 'application/json',\n      };\n      \n      const response = await this.s3.putObject(params).promise();\n      console.log('Wasabi save successful:', response);\n      return { success: true, response };\n    } catch (error) {\n      console.error('Detailed error saving to Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to save to Wasabi: ${error.message}`);\n    }\n  }\n  \n  // Get data from Wasabi\n  async getData(key) {\n    try {\n      console.log(`Attempting to get data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n      };\n      \n      const response = await this.s3.getObject(params).promise();\n      console.log('Wasabi get successful');\n      return JSON.parse(response.Body.toString());\n    } catch (error) {\n      // If the object doesn't exist, return null instead of throwing an error\n      if (error.code === 'NoSuchKey') {\n        console.log('Key not found in Wasabi, returning null');\n        return null;\n      }\n      console.error('Detailed error getting from Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to get data from Wasabi: ${error.message}`);\n    }\n  }\n  \n  // Update specific data in Wasabi\n  async updateData(key, updateFunction) {\n    let data = await this.getData(key);\n    \n    // If data doesn't exist yet, initialize with empty object or array\n    if (!data) {\n      data = typeof updateFunction(null) === 'object' ? {} : [];\n    }\n    \n    // Apply the update function to modify the data\n    const updatedData = updateFunction(data);\n    \n    // Save the updated data back to Wasabi\n    return await this.saveData(key, updatedData);\n  }\n  \n  // Delete data from Wasabi\n  async deleteData(key) {\n    try {\n      console.log(`Attempting to delete data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n      };\n      \n      const response = await this.s3.deleteObject(params).promise();\n      console.log('Wasabi delete successful:', response);\n      return { success: true, response };\n    } catch (error) {\n      console.error('Detailed error deleting from Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to delete from Wasabi: ${error.message}`);\n    }\n  }\n\n  async listObjects(prefix) {\n    const data = await this.s3.listObjectsV2({\n      Bucket: this.bucket,\n      Prefix: prefix\n    }).promise();\n    return data.Contents;\n  }\n\n  async deleteObject(key) {\n    await this.s3.deleteObject({\n      Bucket: this.bucket,\n      Key: key\n    }).promise();\n  }\n}\n\n// Create and export a singleton instance\nconst wasabiStorage = new WasabiStorage();\nexport default wasabiStorage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}