{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass Database {\n  async login(email, password) {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) throw new Error((await response.json()).error || 'Login failed');\n    return await response.json();\n  }\n  async register(userData) {\n    const response = await fetch(`${API_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) throw new Error((await response.json()).error || 'Registration failed');\n    return await response.json();\n  }\n  async getPendingTeachers() {\n    const response = await fetch(`${API_URL}/pending-teachers`);\n    if (!response.ok) throw new Error('Failed to fetch pending teachers');\n    return await response.json();\n  }\n  async approveTeacher(email) {\n    const response = await fetch(`${API_URL}/approve-teacher`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (!response.ok) throw new Error('Failed to approve teacher');\n    return await response.json();\n  }\n  async declineTeacher(email) {\n    const response = await fetch(`${API_URL}/decline-teacher`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (!response.ok) throw new Error('Failed to decline teacher');\n    return await response.json();\n  }\n  async getTeachers() {\n    const response = await fetch(`${API_URL}/teachers`);\n    if (!response.ok) throw new Error('Failed to fetch teachers');\n    return await response.json();\n  }\n  async removeTeacher(email) {\n    const response = await fetch(`${API_URL}/remove-teacher`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (!response.ok) throw new Error('Failed to remove teacher');\n    return await response.json();\n  }\n}\nconst database = new Database();\nexport default database;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","Database","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","register","userData","getPendingTeachers","approveTeacher","declineTeacher","getTeachers","removeTeacher","database"],"sources":["D:/dadas/he true randomizer/theta/src/services/Database.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass Database {\n    async login(email, password) {\n        const response = await fetch(`${API_URL}/login`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ email, password }),\n        });\n        if (!response.ok) throw new Error((await response.json()).error || 'Login failed');\n        return await response.json();\n    }\n\n    async register(userData) {\n        const response = await fetch(`${API_URL}/register`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(userData),\n        });\n        if (!response.ok) throw new Error((await response.json()).error || 'Registration failed');\n        return await response.json();\n    }\n\n    async getPendingTeachers() {\n        const response = await fetch(`${API_URL}/pending-teachers`);\n        if (!response.ok) throw new Error('Failed to fetch pending teachers');\n        return await response.json();\n    }\n\n    async approveTeacher(email) {\n        const response = await fetch(`${API_URL}/approve-teacher`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ email }),\n        });\n        if (!response.ok) throw new Error('Failed to approve teacher');\n        return await response.json();\n    }\n\n    async declineTeacher(email) {\n        const response = await fetch(`${API_URL}/decline-teacher`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ email }),\n        });\n        if (!response.ok) throw new Error('Failed to decline teacher');\n        return await response.json();\n    }\n\n    async getTeachers() {\n        const response = await fetch(`${API_URL}/teachers`);\n        if (!response.ok) throw new Error('Failed to fetch teachers');\n        return await response.json();\n    }\n\n    async removeTeacher(email) {\n        const response = await fetch(`${API_URL}/remove-teacher`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ email }),\n        });\n        if (!response.ok) throw new Error('Failed to remove teacher');\n        return await response.json();\n    }\n}\n\nconst database = new Database();\nexport default database; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}