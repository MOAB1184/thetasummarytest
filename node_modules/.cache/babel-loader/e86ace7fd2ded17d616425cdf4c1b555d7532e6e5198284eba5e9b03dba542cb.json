{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass Database {\n  async login(email, password) {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) throw new Error((await response.json()).error || 'Login failed');\n    return await response.json();\n  }\n  async createUser(userData) {\n    const response = await fetch(`${API_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) throw new Error((await response.json()).error || 'Registration failed');\n    return await response.json();\n  }\n}\nexport default new Database();","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","Database","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","createUser","userData"],"sources":["D:/dadas/he true randomizer/theta/src/services/Database.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass Database {\r\n    async login(email, password) {\r\n        const response = await fetch(`${API_URL}/login`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ email, password }),\r\n        });\r\n        if (!response.ok) throw new Error((await response.json()).error || 'Login failed');\r\n        return await response.json();\r\n    }\r\n\r\n    async createUser(userData) {\r\n        const response = await fetch(`${API_URL}/register`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        if (!response.ok) throw new Error((await response.json()).error || 'Registration failed');\r\n        return await response.json();\r\n    }\r\n}\r\n\r\nexport default new Database(); "],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,QAAQ,CAAC;EACX,MAAMC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,OAAO,QAAQ,EAAE;MAC7CU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC5C,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,CAAC,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,EAAEC,KAAK,IAAI,cAAc,CAAC;IAClF,OAAO,MAAMV,QAAQ,CAACS,IAAI,CAAC,CAAC;EAChC;EAEA,MAAME,UAAUA,CAACC,QAAQ,EAAE;IACvB,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,OAAO,WAAW,EAAE;MAChDU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACM,QAAQ;IACjC,CAAC,CAAC;IACF,IAAI,CAACZ,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,CAAC,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,EAAEC,KAAK,IAAI,qBAAqB,CAAC;IACzF,OAAO,MAAMV,QAAQ,CAACS,IAAI,CAAC,CAAC;EAChC;AACJ;AAEA,eAAe,IAAIb,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}