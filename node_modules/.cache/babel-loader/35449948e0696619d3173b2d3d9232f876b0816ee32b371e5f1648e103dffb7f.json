{"ast":null,"code":"import Web3 from 'web3';\nclass InfuraStorage {\n  constructor() {\n    this.initialized = false;\n    this.connecting = false;\n    this.accounts = [];\n    this.web3 = null;\n    console.log('========== INFURA STORAGE INITIALIZED ==========');\n    console.log('USING INFURA BLOCKCHAIN STORAGE DIRECTLY');\n\n    // Initialize Web3 with Infura\n    const INFURA_API_KEY = \"oTRLidu8+D8ciADc4ii/Mbb/FXM9mg691AroUsPT9vkOTYBjmw+3Vw\";\n    const INFURA_ENDPOINT = `https://goerli.infura.io/v3/${INFURA_API_KEY}`;\n    try {\n      this.web3 = new Web3(new Web3.providers.HttpProvider(INFURA_ENDPOINT));\n      console.log('Connected to Infura provider');\n    } catch (error) {\n      console.error('Failed to connect to Infura:', error);\n    }\n    console.log('==============================================');\n  }\n\n  // Connect to Infura\n  async connect() {\n    if (this.initialized) {\n      return {\n        success: true,\n        accounts: this.accounts\n      };\n    }\n    if (this.connecting) {\n      console.log(\"Connection already in progress\");\n      return {\n        success: false,\n        error: \"Connection in progress\"\n      };\n    }\n    try {\n      this.connecting = true;\n      console.log(\"Connecting to Infura...\");\n\n      // Using a fixed demo account for this implementation\n      // In a real implementation, would manage accounts differently\n      this.accounts = ['0x0000000000000000000000000000000000000000'];\n      console.log(\"Connected to Infura\");\n      this.initialized = true;\n      this.connecting = false;\n      return {\n        success: true,\n        accounts: this.accounts\n      };\n    } catch (error) {\n      console.error(\"Error connecting to Infura:\", error);\n      this.connecting = false;\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get the current connected account\n  getCurrentAccount() {\n    return this.accounts && this.accounts.length > 0 ? this.accounts[0] : null;\n  }\n\n  // Store data (using localStorage since we're not using MetaMask)\n  async saveData(key, data) {\n    try {\n      // Ensure connection\n      if (!this.initialized) {\n        await this.connect();\n      }\n      console.log(`Storing data with key: ${key}`);\n\n      // Using localStorage with a fixed namespace\n      localStorage.setItem(`infura_${key}`, JSON.stringify(data));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Error saving data:\", error);\n      throw new Error(`Failed to save data: ${error.message}`);\n    }\n  }\n\n  // Get data from storage\n  async getData(key) {\n    try {\n      // Ensure connection\n      if (!this.initialized) {\n        await this.connect();\n      }\n      console.log(`Getting data with key: ${key}`);\n      const storageKey = `infura_${key}`;\n      const data = localStorage.getItem(storageKey);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error(\"Error getting data:\", error);\n      return null;\n    }\n  }\n\n  // Update data\n  async updateData(key, updateFunction) {\n    try {\n      // Ensure connection\n      if (!this.initialized) {\n        await this.connect();\n      }\n      let data = await this.getData(key);\n\n      // If data doesn't exist yet, initialize with empty object or array\n      if (!data) {\n        data = typeof updateFunction(null) === 'object' ? {} : [];\n      }\n\n      // Apply the update function to modify the data\n      const updatedData = updateFunction(data);\n\n      // Save the updated data\n      return await this.saveData(key, updatedData);\n    } catch (error) {\n      console.error(\"Error updating data:\", error);\n      throw new Error(`Failed to update data: ${error.message}`);\n    }\n  }\n\n  // Delete data\n  async deleteData(key) {\n    try {\n      // Ensure connection\n      if (!this.initialized) {\n        await this.connect();\n      }\n      console.log(`Deleting data with key: ${key}`);\n      const storageKey = `infura_${key}`;\n      localStorage.removeItem(storageKey);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Error deleting data:\", error);\n      throw new Error(`Failed to delete data: ${error.message}`);\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst infuraStorage = new InfuraStorage();\nexport default infuraStorage;","map":{"version":3,"names":["Web3","InfuraStorage","constructor","initialized","connecting","accounts","web3","console","log","INFURA_API_KEY","INFURA_ENDPOINT","providers","HttpProvider","error","connect","success","message","getCurrentAccount","length","saveData","key","data","localStorage","setItem","JSON","stringify","Error","getData","storageKey","getItem","parse","updateData","updateFunction","updatedData","deleteData","removeItem","infuraStorage"],"sources":["D:/dadas/he true randomizer/theta/src/services/MetaMaskStorage.js"],"sourcesContent":["import Web3 from 'web3';\r\n\r\nclass InfuraStorage {\r\n  constructor() {\r\n    this.initialized = false;\r\n    this.connecting = false;\r\n    this.accounts = [];\r\n    this.web3 = null;\r\n    \r\n    console.log('========== INFURA STORAGE INITIALIZED ==========');\r\n    console.log('USING INFURA BLOCKCHAIN STORAGE DIRECTLY');\r\n    \r\n    // Initialize Web3 with Infura\r\n    const INFURA_API_KEY = \"oTRLidu8+D8ciADc4ii/Mbb/FXM9mg691AroUsPT9vkOTYBjmw+3Vw\";\r\n    const INFURA_ENDPOINT = `https://goerli.infura.io/v3/${INFURA_API_KEY}`;\r\n    \r\n    try {\r\n      this.web3 = new Web3(new Web3.providers.HttpProvider(INFURA_ENDPOINT));\r\n      console.log('Connected to Infura provider');\r\n    } catch (error) {\r\n      console.error('Failed to connect to Infura:', error);\r\n    }\r\n    \r\n    console.log('==============================================');\r\n  }\r\n  \r\n  // Connect to Infura\r\n  async connect() {\r\n    if (this.initialized) {\r\n      return { success: true, accounts: this.accounts };\r\n    }\r\n    \r\n    if (this.connecting) {\r\n      console.log(\"Connection already in progress\");\r\n      return { success: false, error: \"Connection in progress\" };\r\n    }\r\n    \r\n    try {\r\n      this.connecting = true;\r\n      console.log(\"Connecting to Infura...\");\r\n      \r\n      // Using a fixed demo account for this implementation\r\n      // In a real implementation, would manage accounts differently\r\n      this.accounts = ['0x0000000000000000000000000000000000000000'];\r\n      \r\n      console.log(\"Connected to Infura\");\r\n      this.initialized = true;\r\n      this.connecting = false;\r\n      \r\n      return { success: true, accounts: this.accounts };\r\n    } catch (error) {\r\n      console.error(\"Error connecting to Infura:\", error);\r\n      this.connecting = false;\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n  \r\n  // Get the current connected account\r\n  getCurrentAccount() {\r\n    return this.accounts && this.accounts.length > 0 ? this.accounts[0] : null;\r\n  }\r\n  \r\n  // Store data (using localStorage since we're not using MetaMask)\r\n  async saveData(key, data) {\r\n    try {\r\n      // Ensure connection\r\n      if (!this.initialized) {\r\n        await this.connect();\r\n      }\r\n      \r\n      console.log(`Storing data with key: ${key}`);\r\n      \r\n      // Using localStorage with a fixed namespace\r\n      localStorage.setItem(`infura_${key}`, JSON.stringify(data));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error(\"Error saving data:\", error);\r\n      throw new Error(`Failed to save data: ${error.message}`);\r\n    }\r\n  }\r\n  \r\n  // Get data from storage\r\n  async getData(key) {\r\n    try {\r\n      // Ensure connection\r\n      if (!this.initialized) {\r\n        await this.connect();\r\n      }\r\n      \r\n      console.log(`Getting data with key: ${key}`);\r\n      \r\n      const storageKey = `infura_${key}`;\r\n      const data = localStorage.getItem(storageKey);\r\n      \r\n      return data ? JSON.parse(data) : null;\r\n    } catch (error) {\r\n      console.error(\"Error getting data:\", error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // Update data\r\n  async updateData(key, updateFunction) {\r\n    try {\r\n      // Ensure connection\r\n      if (!this.initialized) {\r\n        await this.connect();\r\n      }\r\n      \r\n      let data = await this.getData(key);\r\n      \r\n      // If data doesn't exist yet, initialize with empty object or array\r\n      if (!data) {\r\n        data = typeof updateFunction(null) === 'object' ? {} : [];\r\n      }\r\n      \r\n      // Apply the update function to modify the data\r\n      const updatedData = updateFunction(data);\r\n      \r\n      // Save the updated data\r\n      return await this.saveData(key, updatedData);\r\n    } catch (error) {\r\n      console.error(\"Error updating data:\", error);\r\n      throw new Error(`Failed to update data: ${error.message}`);\r\n    }\r\n  }\r\n  \r\n  // Delete data\r\n  async deleteData(key) {\r\n    try {\r\n      // Ensure connection\r\n      if (!this.initialized) {\r\n        await this.connect();\r\n      }\r\n      \r\n      console.log(`Deleting data with key: ${key}`);\r\n      \r\n      const storageKey = `infura_${key}`;\r\n      localStorage.removeItem(storageKey);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error(\"Error deleting data:\", error);\r\n      throw new Error(`Failed to delete data: ${error.message}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nconst infuraStorage = new InfuraStorage();\r\nexport default infuraStorage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}