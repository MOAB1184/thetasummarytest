{"ast":null,"code":"var _jsxFileName = \"D:\\\\dadas\\\\he true randomizer\\\\theta\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const chatBoxRef = useRef(null);\n  const recognitionRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const userAnalyserRef = useRef(null);\n  const aiAnalyserRef = useRef(null);\n  useEffect(() => {\n    // Initialize speech recognition\n    const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognitionAPI) {\n      recognitionRef.current = new SpeechRecognitionAPI();\n      recognitionRef.current.continuous = false;\n      recognitionRef.current.interimResults = false;\n      recognitionRef.current.lang = 'en-US';\n      recognitionRef.current.onresult = event => {\n        const text = event.results[0][0].transcript;\n        setInputText(text);\n        sendMessage(text);\n      };\n      recognitionRef.current.onend = () => {\n        setIsListening(false);\n      };\n    }\n\n    // Initialize audio context\n    try {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      userAnalyserRef.current = audioContextRef.current.createAnalyser();\n      userAnalyserRef.current.fftSize = 256;\n      userAnalyserRef.current.smoothingTimeConstant = 0.8;\n      aiAnalyserRef.current = audioContextRef.current.createAnalyser();\n      aiAnalyserRef.current.fftSize = 256;\n      aiAnalyserRef.current.smoothingTimeConstant = 0.8;\n    } catch (e) {\n      console.error(\"Error initializing audio context:\", e);\n    }\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, []);\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n  const startListening = () => {\n    if (recognitionRef.current && !isListening) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n  const sendMessage = async (text = null) => {\n    const messageToSend = text || inputText;\n    if (!messageToSend.trim()) return;\n\n    // Add user message\n    const userMessage = {\n      type: 'user',\n      text: messageToSend\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputText('');\n    try {\n      const response = await fetch('http://localhost:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: messageToSend\n        })\n      });\n      if (!response.ok) throw new Error('Network response was not ok');\n      const data = await response.json();\n\n      // Add bot message\n      const botMessage = {\n        type: 'bot',\n        text: data.response\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // Speak the response\n      speakText(data.response);\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prev => [...prev, {\n        type: 'error',\n        text: 'Sorry, I encountered an error. Please try again.'\n      }]);\n    }\n  };\n  const speakText = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.onstart = () => {\n      // Start volume animation for AI message\n      if (aiAnalyserRef.current) {\n        animateBubble(chatBoxRef.current.lastChild, aiAnalyserRef.current, false);\n      }\n    };\n    utterance.onend = () => {\n      // Stop volume animation\n      if (aiAnalyserRef.current) {\n        stopBubbleAnimation(chatBoxRef.current.lastChild);\n      }\n    };\n    window.speechSynthesis.speak(utterance);\n  };\n  const animateBubble = (element, analyser, isUser) => {\n    if (!element || !analyser) return null;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    function animate() {\n      analyser.getByteFrequencyData(dataArray);\n      let sum = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        sum += dataArray[i];\n      }\n      const volume = sum / bufferLength;\n      const scale = 1 + volume / 128 * 0.5;\n      element.style.transform = `scale(${scale})`;\n      requestAnimationFrame(animate);\n    }\n    return requestAnimationFrame(animate);\n  };\n  const stopBubbleAnimation = element => {\n    if (element) {\n      element.style.transform = 'scale(1)';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot-container ${isOpen ? 'open' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-toggle\",\n      onClick: toggleChat,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/chatbot-icon.svg\",\n        alt: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"AI Tutor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: toggleChat,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        ref: chatBoxRef,\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.type}`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: e => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              e.preventDefault();\n              sendMessage();\n            }\n          },\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbot-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mic-button ${isListening ? 'listening' : ''}`,\n            onClick: isListening ? stopListening : startListening,\n            children: \"\\uD83C\\uDFA4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => sendMessage(),\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"IhAgFx1wWe7FWQ4glUvzAzrBqo0=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","ChatBot","_s","isOpen","setIsOpen","messages","setMessages","inputText","setInputText","isListening","setIsListening","chatBoxRef","recognitionRef","audioContextRef","userAnalyserRef","aiAnalyserRef","SpeechRecognitionAPI","window","SpeechRecognition","webkitSpeechRecognition","current","continuous","interimResults","lang","onresult","event","text","results","transcript","sendMessage","onend","AudioContext","webkitAudioContext","createAnalyser","fftSize","smoothingTimeConstant","e","console","error","stop","toggleChat","startListening","start","stopListening","messageToSend","trim","userMessage","type","prev","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","data","json","botMessage","speakText","utterance","SpeechSynthesisUtterance","onstart","animateBubble","lastChild","stopBubbleAnimation","speechSynthesis","speak","element","analyser","isUser","bufferLength","frequencyBinCount","dataArray","Uint8Array","animate","getByteFrequencyData","sum","i","volume","scale","style","transform","requestAnimationFrame","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","msg","index","value","onChange","target","onKeyPress","key","shiftKey","preventDefault","placeholder","_c","$RefreshReg$"],"sources":["D:/dadas/he true randomizer/theta/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './ChatBot.css';\r\n\r\nfunction ChatBot() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const chatBoxRef = useRef(null);\r\n  const recognitionRef = useRef(null);\r\n  const audioContextRef = useRef(null);\r\n  const userAnalyserRef = useRef(null);\r\n  const aiAnalyserRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize speech recognition\r\n    const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    if (SpeechRecognitionAPI) {\r\n      recognitionRef.current = new SpeechRecognitionAPI();\r\n      recognitionRef.current.continuous = false;\r\n      recognitionRef.current.interimResults = false;\r\n      recognitionRef.current.lang = 'en-US';\r\n\r\n      recognitionRef.current.onresult = (event) => {\r\n        const text = event.results[0][0].transcript;\r\n        setInputText(text);\r\n        sendMessage(text);\r\n      };\r\n\r\n      recognitionRef.current.onend = () => {\r\n        setIsListening(false);\r\n      };\r\n    }\r\n\r\n    // Initialize audio context\r\n    try {\r\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n      userAnalyserRef.current = audioContextRef.current.createAnalyser();\r\n      userAnalyserRef.current.fftSize = 256;\r\n      userAnalyserRef.current.smoothingTimeConstant = 0.8;\r\n\r\n      aiAnalyserRef.current = audioContextRef.current.createAnalyser();\r\n      aiAnalyserRef.current.fftSize = 256;\r\n      aiAnalyserRef.current.smoothingTimeConstant = 0.8;\r\n    } catch (e) {\r\n      console.error(\"Error initializing audio context:\", e);\r\n    }\r\n\r\n    return () => {\r\n      if (recognitionRef.current) {\r\n        recognitionRef.current.stop();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const toggleChat = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const startListening = () => {\r\n    if (recognitionRef.current && !isListening) {\r\n      recognitionRef.current.start();\r\n      setIsListening(true);\r\n    }\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (recognitionRef.current && isListening) {\r\n      recognitionRef.current.stop();\r\n      setIsListening(false);\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (text = null) => {\r\n    const messageToSend = text || inputText;\r\n    if (!messageToSend.trim()) return;\r\n\r\n    // Add user message\r\n    const userMessage = { type: 'user', text: messageToSend };\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInputText('');\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ message: messageToSend }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Network response was not ok');\r\n\r\n      const data = await response.json();\r\n      \r\n      // Add bot message\r\n      const botMessage = { type: 'bot', text: data.response };\r\n      setMessages(prev => [...prev, botMessage]);\r\n\r\n      // Speak the response\r\n      speakText(data.response);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setMessages(prev => [...prev, { type: 'error', text: 'Sorry, I encountered an error. Please try again.' }]);\r\n    }\r\n  };\r\n\r\n  const speakText = (text) => {\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    utterance.onstart = () => {\r\n      // Start volume animation for AI message\r\n      if (aiAnalyserRef.current) {\r\n        animateBubble(chatBoxRef.current.lastChild, aiAnalyserRef.current, false);\r\n      }\r\n    };\r\n    utterance.onend = () => {\r\n      // Stop volume animation\r\n      if (aiAnalyserRef.current) {\r\n        stopBubbleAnimation(chatBoxRef.current.lastChild);\r\n      }\r\n    };\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const animateBubble = (element, analyser, isUser) => {\r\n    if (!element || !analyser) return null;\r\n    \r\n    const bufferLength = analyser.frequencyBinCount;\r\n    const dataArray = new Uint8Array(bufferLength);\r\n    \r\n    function animate() {\r\n      analyser.getByteFrequencyData(dataArray);\r\n      let sum = 0;\r\n      for (let i = 0; i < bufferLength; i++) {\r\n        sum += dataArray[i];\r\n      }\r\n      const volume = sum / bufferLength;\r\n      const scale = 1 + (volume / 128) * 0.5;\r\n      element.style.transform = `scale(${scale})`;\r\n      requestAnimationFrame(animate);\r\n    }\r\n    \r\n    return requestAnimationFrame(animate);\r\n  };\r\n\r\n  const stopBubbleAnimation = (element) => {\r\n    if (element) {\r\n      element.style.transform = 'scale(1)';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`chatbot-container ${isOpen ? 'open' : ''}`}>\r\n      <button className=\"chatbot-toggle\" onClick={toggleChat}>\r\n        <img src=\"/chatbot-icon.svg\" alt=\"Chat\" />\r\n      </button>\r\n      \r\n      <div className=\"chatbot-window\">\r\n        <div className=\"chatbot-header\">\r\n          <h3>AI Tutor</h3>\r\n          <button className=\"close-button\" onClick={toggleChat}>×</button>\r\n        </div>\r\n        \r\n        <div className=\"chatbot-messages\" ref={chatBoxRef}>\r\n          {messages.map((msg, index) => (\r\n            <div key={index} className={`message ${msg.type}`}>\r\n              {msg.text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        \r\n        <div className=\"chatbot-input\">\r\n          <textarea\r\n            value={inputText}\r\n            onChange={(e) => setInputText(e.target.value)}\r\n            onKeyPress={(e) => {\r\n              if (e.key === 'Enter' && !e.shiftKey) {\r\n                e.preventDefault();\r\n                sendMessage();\r\n              }\r\n            }}\r\n            placeholder=\"Type your message...\"\r\n          />\r\n          <div className=\"chatbot-buttons\">\r\n            <button\r\n              className={`mic-button ${isListening ? 'listening' : ''}`}\r\n              onClick={isListening ? stopListening : startListening}\r\n            >\r\n              🎤\r\n            </button>\r\n            <button onClick={() => sendMessage()}>Send</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}