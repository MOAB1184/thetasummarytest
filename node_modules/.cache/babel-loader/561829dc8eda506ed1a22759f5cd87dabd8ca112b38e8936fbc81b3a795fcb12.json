{"ast":null,"code":"var _jsxFileName = \"D:\\\\dadas\\\\he true randomizer\\\\theta\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './ChatBot.css';\nimport logo from './assets/logo.png';\nimport LatexFormatter from './LatexFormatter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const chatBoxRef = useRef(null);\n  const recognitionRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const userAnalyserRef = useRef(null);\n  const aiAnalyserRef = useRef(null);\n  useEffect(() => {\n    // Initialize speech recognition\n    const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognitionAPI) {\n      recognitionRef.current = new SpeechRecognitionAPI();\n      recognitionRef.current.continuous = false;\n      recognitionRef.current.interimResults = false;\n      recognitionRef.current.lang = 'en-US';\n      recognitionRef.current.onresult = event => {\n        const text = event.results[0][0].transcript;\n        setInputText(text);\n        sendMessage(text);\n      };\n      recognitionRef.current.onend = () => {\n        setIsListening(false);\n      };\n    }\n\n    // Initialize audio context\n    try {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      userAnalyserRef.current = audioContextRef.current.createAnalyser();\n      userAnalyserRef.current.fftSize = 256;\n      userAnalyserRef.current.smoothingTimeConstant = 0.8;\n      aiAnalyserRef.current = audioContextRef.current.createAnalyser();\n      aiAnalyserRef.current.fftSize = 256;\n      aiAnalyserRef.current.smoothingTimeConstant = 0.8;\n    } catch (e) {\n      console.error(\"Error initializing audio context:\", e);\n    }\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, []);\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n  const startListening = () => {\n    if (recognitionRef.current && !isListening) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n  const sendMessage = async (text = null) => {\n    const messageToSend = text || inputText;\n    if (!messageToSend.trim()) return;\n    setIsLoading(true);\n\n    // Add user message\n    const userMessage = {\n      type: 'user',\n      text: messageToSend\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputText('');\n    try {\n      // Prepare conversation history\n      const history = messages.map(msg => ({\n        role: msg.type === 'user' ? 'user' : 'assistant',\n        content: msg.text\n      }));\n      const response = await fetch('http://localhost:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: messageToSend,\n          history\n        })\n      });\n      if (!response.ok) throw new Error('Network response was not ok');\n      const data = await response.json();\n\n      // Add bot message\n      const botMessage = {\n        type: 'bot',\n        text: data.response\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // Speak the response\n      speakText(data.response);\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prev => [...prev, {\n        type: 'error',\n        text: 'Sorry, I encountered an error. Please try again.'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const speakText = async text => {\n    try {\n      const response = await fetch('http://localhost:5000/tts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) throw new Error('TTS request failed');\n      const audioBlob = await response.blob();\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      audio.onplay = () => {\n        if (aiAnalyserRef.current) {\n          animateBubble(chatBoxRef.current.lastChild, aiAnalyserRef.current, false);\n        }\n      };\n      audio.onended = () => {\n        if (aiAnalyserRef.current) {\n          stopBubbleAnimation(chatBoxRef.current.lastChild);\n        }\n        URL.revokeObjectURL(audioUrl);\n      };\n      audio.play();\n    } catch (error) {\n      console.error('TTS error:', error);\n    }\n  };\n  const animateBubble = (element, analyser, isUser) => {\n    if (!element || !analyser) return null;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    function animate() {\n      analyser.getByteFrequencyData(dataArray);\n      let sum = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        sum += dataArray[i];\n      }\n      const volume = sum / bufferLength;\n      const scale = 1 + volume / 128 * 0.5;\n      element.style.transform = `scale(${scale})`;\n      requestAnimationFrame(animate);\n    }\n    return requestAnimationFrame(animate);\n  };\n  const stopBubbleAnimation = element => {\n    if (element) {\n      element.style.transform = 'scale(1)';\n    }\n  };\n\n  // Helper to split and render all LaTeX expressions in a message\n  const renderWithLatex = text => {\n    if (!text) return null;\n    // Regex for $...$ (inline), \\[...\\] (block), \\(...\\) (inline)\n    const regex = /(\\$[^$]+\\$|\\\\\\[[\\s\\S]*?\\\\\\]|\\\\\\([\\s\\S]*?\\\\\\))/g;\n    const parts = text.split(regex);\n    return parts.map((part, i) => {\n      if (part.match(regex)) {\n        // Remove $ or \\[ \\] or \\( \\) delimiters for KaTeX\n        let latex = part;\n        if (latex.startsWith('$$') && latex.endsWith('$$')) {\n          latex = latex.slice(2, -2);\n        } else if (latex.startsWith('$') && latex.endsWith('$')) {\n          latex = latex.slice(1, -1);\n        } else if (latex.startsWith('\\\\[') && latex.endsWith('\\\\]')) {\n          latex = latex.slice(2, -2);\n        } else if (latex.startsWith('\\\\(') && latex.endsWith('\\\\)')) {\n          latex = latex.slice(2, -2);\n        }\n        return /*#__PURE__*/_jsxDEV(LatexFormatter, {\n          content: latex.trim()\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: part\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 16\n        }, this);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot-container ${isOpen ? 'open' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-toggle\",\n      onClick: toggleChat,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"AI Tutor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: toggleChat,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        ref: chatBoxRef,\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.type}`,\n          children: renderWithLatex(msg.text)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: e => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              e.preventDefault();\n              sendMessage();\n            }\n          },\n          placeholder: \"Type your message...\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbot-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mic-button ${isListening ? 'listening' : ''}`,\n            onClick: isListening ? stopListening : startListening,\n            disabled: isLoading,\n            children: \"\\uD83C\\uDFA4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => sendMessage(),\n            disabled: isLoading,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"ebX2/2ucIbBtQ3MRXeg8pduv9mQ=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","logo","LatexFormatter","jsxDEV","_jsxDEV","ChatBot","_s","isOpen","setIsOpen","messages","setMessages","inputText","setInputText","isListening","setIsListening","isLoading","setIsLoading","chatBoxRef","recognitionRef","audioContextRef","userAnalyserRef","aiAnalyserRef","SpeechRecognitionAPI","window","SpeechRecognition","webkitSpeechRecognition","current","continuous","interimResults","lang","onresult","event","text","results","transcript","sendMessage","onend","AudioContext","webkitAudioContext","createAnalyser","fftSize","smoothingTimeConstant","e","console","error","stop","toggleChat","startListening","start","stopListening","messageToSend","trim","userMessage","type","prev","history","map","msg","role","content","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","data","json","botMessage","speakText","audioBlob","blob","audioUrl","URL","createObjectURL","audio","Audio","onplay","animateBubble","lastChild","onended","stopBubbleAnimation","revokeObjectURL","play","element","analyser","isUser","bufferLength","frequencyBinCount","dataArray","Uint8Array","animate","getByteFrequencyData","sum","i","volume","scale","style","transform","requestAnimationFrame","renderWithLatex","regex","parts","split","part","match","latex","startsWith","endsWith","slice","fileName","_jsxFileName","lineNumber","columnNumber","children","className","onClick","src","alt","ref","index","value","onChange","target","onKeyPress","key","shiftKey","preventDefault","placeholder","disabled","_c","$RefreshReg$"],"sources":["D:/dadas/he true randomizer/theta/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './ChatBot.css';\nimport logo from './assets/logo.png';\nimport LatexFormatter from './LatexFormatter';\n\nfunction ChatBot() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const chatBoxRef = useRef(null);\n  const recognitionRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const userAnalyserRef = useRef(null);\n  const aiAnalyserRef = useRef(null);\n\n  useEffect(() => {\n    // Initialize speech recognition\n    const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognitionAPI) {\n      recognitionRef.current = new SpeechRecognitionAPI();\n      recognitionRef.current.continuous = false;\n      recognitionRef.current.interimResults = false;\n      recognitionRef.current.lang = 'en-US';\n\n      recognitionRef.current.onresult = (event) => {\n        const text = event.results[0][0].transcript;\n        setInputText(text);\n        sendMessage(text);\n      };\n\n      recognitionRef.current.onend = () => {\n        setIsListening(false);\n      };\n    }\n\n    // Initialize audio context\n    try {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      userAnalyserRef.current = audioContextRef.current.createAnalyser();\n      userAnalyserRef.current.fftSize = 256;\n      userAnalyserRef.current.smoothingTimeConstant = 0.8;\n\n      aiAnalyserRef.current = audioContextRef.current.createAnalyser();\n      aiAnalyserRef.current.fftSize = 256;\n      aiAnalyserRef.current.smoothingTimeConstant = 0.8;\n    } catch (e) {\n      console.error(\"Error initializing audio context:\", e);\n    }\n\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, []);\n\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const startListening = () => {\n    if (recognitionRef.current && !isListening) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n\n  const stopListening = () => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n\n  const sendMessage = async (text = null) => {\n    const messageToSend = text || inputText;\n    if (!messageToSend.trim()) return;\n\n    setIsLoading(true);\n\n    // Add user message\n    const userMessage = { type: 'user', text: messageToSend };\n    setMessages(prev => [...prev, userMessage]);\n    setInputText('');\n\n    try {\n      // Prepare conversation history\n      const history = messages.map(msg => ({\n        role: msg.type === 'user' ? 'user' : 'assistant',\n        content: msg.text\n      }));\n\n      const response = await fetch('http://localhost:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          message: messageToSend,\n          history\n        }),\n      });\n\n      if (!response.ok) throw new Error('Network response was not ok');\n\n      const data = await response.json();\n      \n      // Add bot message\n      const botMessage = { type: 'bot', text: data.response };\n      setMessages(prev => [...prev, botMessage]);\n\n      // Speak the response\n      speakText(data.response);\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prev => [...prev, { type: 'error', text: 'Sorry, I encountered an error. Please try again.' }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const speakText = async (text) => {\n    try {\n      const response = await fetch('http://localhost:5000/tts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ text }),\n      });\n\n      if (!response.ok) throw new Error('TTS request failed');\n\n      const audioBlob = await response.blob();\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n\n      audio.onplay = () => {\n        if (aiAnalyserRef.current) {\n          animateBubble(chatBoxRef.current.lastChild, aiAnalyserRef.current, false);\n        }\n      };\n\n      audio.onended = () => {\n        if (aiAnalyserRef.current) {\n          stopBubbleAnimation(chatBoxRef.current.lastChild);\n        }\n        URL.revokeObjectURL(audioUrl);\n      };\n\n      audio.play();\n    } catch (error) {\n      console.error('TTS error:', error);\n    }\n  };\n\n  const animateBubble = (element, analyser, isUser) => {\n    if (!element || !analyser) return null;\n    \n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    \n    function animate() {\n      analyser.getByteFrequencyData(dataArray);\n      let sum = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        sum += dataArray[i];\n      }\n      const volume = sum / bufferLength;\n      const scale = 1 + (volume / 128) * 0.5;\n      element.style.transform = `scale(${scale})`;\n      requestAnimationFrame(animate);\n    }\n    \n    return requestAnimationFrame(animate);\n  };\n\n  const stopBubbleAnimation = (element) => {\n    if (element) {\n      element.style.transform = 'scale(1)';\n    }\n  };\n\n  // Helper to split and render all LaTeX expressions in a message\n  const renderWithLatex = (text) => {\n    if (!text) return null;\n    // Regex for $...$ (inline), \\[...\\] (block), \\(...\\) (inline)\n    const regex = /(\\$[^$]+\\$|\\\\\\[[\\s\\S]*?\\\\\\]|\\\\\\([\\s\\S]*?\\\\\\))/g;\n    const parts = text.split(regex);\n    return parts.map((part, i) => {\n      if (part.match(regex)) {\n        // Remove $ or \\[ \\] or \\( \\) delimiters for KaTeX\n        let latex = part;\n        if (latex.startsWith('$$') && latex.endsWith('$$')) {\n          latex = latex.slice(2, -2);\n        } else if (latex.startsWith('$') && latex.endsWith('$')) {\n          latex = latex.slice(1, -1);\n        } else if (latex.startsWith('\\\\[') && latex.endsWith('\\\\]')) {\n          latex = latex.slice(2, -2);\n        } else if (latex.startsWith('\\\\(') && latex.endsWith('\\\\)')) {\n          latex = latex.slice(2, -2);\n        }\n        return <LatexFormatter key={i} content={latex.trim()} />;\n      } else {\n        return <span key={i}>{part}</span>;\n      }\n    });\n  };\n\n  return (\n    <div className={`chatbot-container ${isOpen ? 'open' : ''}`}>\n      <button className=\"chatbot-toggle\" onClick={toggleChat}>\n        <img src={logo} alt=\"Chat\" />\n      </button>\n      \n      <div className=\"chatbot-window\">\n        <div className=\"chatbot-header\">\n          <h3>AI Tutor</h3>\n          <button className=\"close-button\" onClick={toggleChat}>×</button>\n        </div>\n        \n        <div className=\"chatbot-messages\" ref={chatBoxRef}>\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.type}`}>\n              {renderWithLatex(msg.text)}\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"message bot\">\n              <div className=\"typing-indicator\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"chatbot-input\">\n          <textarea\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                sendMessage();\n              }\n            }}\n            placeholder=\"Type your message...\"\n            disabled={isLoading}\n          />\n          <div className=\"chatbot-buttons\">\n            <button\n              className={`mic-button ${isListening ? 'listening' : ''}`}\n              onClick={isListening ? stopListening : startListening}\n              disabled={isLoading}\n            >\n              🎤\n            </button>\n            <button onClick={() => sendMessage()} disabled={isLoading}>\n              Send\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatBot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}