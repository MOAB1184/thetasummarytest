{"ast":null,"code":"import AWS from 'aws-sdk';\n\n// Initialize the Wasabi storage service\n// Note: In a real implementation, these credentials would be stored securely \n// and potentially fetched from environment variables or a backend service\nclass WasabiStorage {\n  constructor() {\n    console.log('========== WASABI STORAGE INITIALIZED ==========');\n    console.log('USING WASABI CLOUD STORAGE - NOT USING LOCALSTORAGE');\n    console.log(`Bucket: thetatest, Endpoint: https://s3.us-west-1.wasabisys.com`);\n\n    // Configure the Wasabi connection\n    this.s3 = new AWS.S3({\n      endpoint: 'https://s3.us-west-1.wasabisys.com',\n      accessKeyId: 'W7X9U7PACFCWQZHRJBRH',\n      secretAccessKey: 'Xc3tkWt1W0tGSMhEN3w6WTPJNsOlWYuhtirgV9Dc',\n      region: 'us-west-1',\n      s3ForcePathStyle: true // Required for Wasabi\n    });\n    this.bucket = 'thetatest';\n\n    // Initialize base folders\n    this.initializeFolders();\n\n    // Never fall back to localStorage\n    this.useLocalStorage = false;\n\n    // Test connection during initialization but don't fall back\n    this.testConnection();\n    console.log('==============================================');\n  }\n\n  // Initialize the folder structure\n  async initializeFolders() {\n    try {\n      const folders = ['teacher-approval/', 'student-approval/', 'Skyline/', 'Skyline/teachers/', 'Skyline/students/'];\n      await Promise.all(folders.map(folder => this.s3.putObject({\n        Bucket: this.bucket,\n        Key: folder,\n        Body: '',\n        ContentType: 'application/x-directory'\n      }).promise()));\n      return true;\n    } catch (error) {\n      console.error('Error initializing folders:', error);\n      return false;\n    }\n  }\n\n  // Path helpers\n  getTeacherPath(schoolName, email) {\n    return `${schoolName}/teachers/${email}/info.json`;\n  }\n  getPendingTeacherPath(email) {\n    return `teacher-approval/${email}.json`;\n  }\n  getPendingStudentPath(email) {\n    return `student-approval/${email}.json`;\n  }\n  getStudentPath(schoolName, email) {\n    return `${schoolName}/students/${email}/info.json`;\n  }\n  getTeacherClassesPath(schoolName, email) {\n    return `${schoolName}/teachers/${email}/classes/`;\n  }\n  getClassPath(schoolName, teacherEmail, classCode) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/info.json`;\n  }\n  getRecordingsPath(schoolName, teacherEmail, classCode) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/recordings/`;\n  }\n  getRecordingPath(schoolName, teacherEmail, classCode, recordingId) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/recordings/${recordingId}.json`;\n  }\n  getSummariesPath(schoolName, teacherEmail, classCode) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/summaries/`;\n  }\n  getSummaryPath(schoolName, teacherEmail, classCode, summaryId) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/summaries/${summaryId}.json`;\n  }\n  getClassJoinRequestPath(schoolName, teacherEmail, classCode, studentEmail) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/join-requests/${studentEmail}.json`;\n  }\n  getSchoolPath(schoolName) {\n    return `${schoolName}/info.json`;\n  }\n  getSchoolsListPath() {\n    return 'schools.json';\n  }\n\n  // Test the Wasabi connection\n  async testConnection() {\n    try {\n      console.log('Testing Wasabi connection...');\n      // Check if bucket exists\n      const response = await this.s3.headBucket({\n        Bucket: this.bucket\n      }).promise();\n      console.log('Wasabi connection successful:', response);\n      return true;\n    } catch (error) {\n      console.error('Wasabi connection test failed:', error.message, error.code);\n      // Don't fall back to localStorage - just report the error\n      console.error('WARNING: Wasabi storage is not working but fallback is disabled');\n      return false;\n    }\n  }\n\n  // Save data to Wasabi\n  async saveData(key, data) {\n    try {\n      console.log(`Attempting to save data to Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n        Body: JSON.stringify(data),\n        ContentType: 'application/json'\n      };\n      const response = await this.s3.putObject(params).promise();\n      console.log('Wasabi save successful:', response);\n      return {\n        success: true,\n        response\n      };\n    } catch (error) {\n      console.error('Detailed error saving to Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to save to Wasabi: ${error.message}`);\n    }\n  }\n\n  // Get binary data from Wasabi (for files like ZIP)\n  async getBinaryData(key) {\n    try {\n      console.log(`Attempting to get binary data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key\n      };\n      const response = await this.s3.getObject(params).promise();\n      console.log('Wasabi get successful');\n      return response.Body;\n    } catch (error) {\n      if (error.code === 'NoSuchKey') {\n        console.log('Key not found in Wasabi, returning null');\n        return null;\n      }\n      console.error('Detailed error getting from Wasabi:', error.message, error.code, error.statusCode);\n      throw new Error(`Failed to get data from Wasabi: ${error.message}`);\n    }\n  }\n\n  // Get data from Wasabi\n  async getData(key) {\n    try {\n      console.log(`Attempting to get data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key\n      };\n      const response = await this.s3.getObject(params).promise();\n      console.log('Wasabi get successful');\n\n      // If the key ends with .json, parse it as JSON\n      if (key.endsWith('.json')) {\n        return JSON.parse(response.Body.toString());\n      }\n      // Otherwise return the raw buffer\n      return response.Body;\n    } catch (error) {\n      if (error.code === 'NoSuchKey') {\n        console.log('Key not found in Wasabi, returning null');\n        return null;\n      }\n      console.error('Detailed error getting from Wasabi:', error.message, error.code, error.statusCode);\n      throw new Error(`Failed to get data from Wasabi: ${error.message}`);\n    }\n  }\n\n  // Update specific data in Wasabi\n  async updateData(key, updateFunction) {\n    let data = await this.getData(key);\n\n    // If data doesn't exist yet, initialize with empty object or array\n    if (!data) {\n      data = typeof updateFunction(null) === 'object' ? {} : [];\n    }\n\n    // Apply the update function to modify the data\n    const updatedData = updateFunction(data);\n\n    // Save the updated data back to Wasabi\n    return await this.saveData(key, updatedData);\n  }\n\n  // Delete data from Wasabi\n  async deleteData(key) {\n    try {\n      console.log(`Attempting to delete data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key\n      };\n      const response = await this.s3.deleteObject(params).promise();\n      console.log('Wasabi delete successful:', response);\n      return {\n        success: true,\n        response\n      };\n    } catch (error) {\n      console.error('Detailed error deleting from Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to delete from Wasabi: ${error.message}`);\n    }\n  }\n  async listObjects(prefix) {\n    const data = await this.s3.listObjectsV2({\n      Bucket: this.bucket,\n      Prefix: prefix\n    }).promise();\n    return data.Contents || [];\n  }\n  async deleteObject(key) {\n    await this.s3.deleteObject({\n      Bucket: this.bucket,\n      Key: key\n    }).promise();\n  }\n\n  // Move an object from one location to another\n  async moveObject(fromKey, toKey) {\n    try {\n      // Copy the object to the new location\n      await this.s3.copyObject({\n        Bucket: this.bucket,\n        CopySource: `${this.bucket}/${fromKey}`,\n        Key: toKey\n      }).promise();\n\n      // Delete the object from the old location\n      await this.deleteObject(fromKey);\n      console.log(`Successfully moved object from ${fromKey} to ${toKey}`);\n    } catch (error) {\n      console.error('Error moving object:', error);\n      throw error;\n    }\n  }\n  async getSummaries(teacherEmail, classCode) {\n    try {\n      const schoolName = sessionStorage.getItem('userSchool');\n      if (!schoolName) {\n        throw new Error('School information not found');\n      }\n      const summariesPath = this.getSummariesPath(schoolName, teacherEmail, classCode);\n      const summariesData = await this.listObjects(summariesPath);\n      const summaries = [];\n      for (const summary of summariesData) {\n        if (summary.Key.endsWith('.json')) {\n          try {\n            const summaryData = await this.s3.getObject({\n              Bucket: this.bucket,\n              Key: summary.Key\n            }).promise();\n            summaries.push(JSON.parse(summaryData.Body.toString()));\n          } catch (error) {\n            console.error('Error reading summary file:', summary.Key, error);\n          }\n        } else if (summary.Key.endsWith('.pdf')) {\n          // For PDFs, create a summary object with the file info\n          summaries.push({\n            id: summary.Key,\n            name: summary.Key.split('/').pop(),\n            content: summary.Key,\n            // Store the path to the PDF\n            timestamp: summary.LastModified.getTime(),\n            type: 'pdf'\n          });\n        }\n      }\n\n      // Sort summaries by date, newest first\n      summaries.sort((a, b) => b.timestamp - a.timestamp);\n      return summaries;\n    } catch (error) {\n      console.error('Error getting summaries:', error);\n      return [];\n    }\n  }\n  async getPresignedUrl(schoolName, teacherEmail, classCode, pdfId) {\n    try {\n      // Extract just the filename from the full path if it's a full path\n      const fileName = pdfId.includes('/') ? pdfId.split('/').pop() : pdfId;\n      const key = `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/summaries/${fileName}`;\n      const url = this.s3.getSignedUrl('getObject', {\n        Bucket: this.bucket,\n        Key: key,\n        Expires: 3600 // URL expires in 1 hour\n      });\n      return url;\n    } catch (error) {\n      console.error('Error generating pre-signed URL:', error);\n      return null;\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst wasabiStorage = new WasabiStorage();\nexport default wasabiStorage;","map":{"version":3,"names":["AWS","WasabiStorage","constructor","console","log","s3","S3","endpoint","accessKeyId","secretAccessKey","region","s3ForcePathStyle","bucket","initializeFolders","useLocalStorage","testConnection","folders","Promise","all","map","folder","putObject","Bucket","Key","Body","ContentType","promise","error","getTeacherPath","schoolName","email","getPendingTeacherPath","getPendingStudentPath","getStudentPath","getTeacherClassesPath","getClassPath","teacherEmail","classCode","getRecordingsPath","getRecordingPath","recordingId","getSummariesPath","getSummaryPath","summaryId","getClassJoinRequestPath","studentEmail","getSchoolPath","getSchoolsListPath","response","headBucket","message","code","saveData","key","data","params","JSON","stringify","success","statusCode","Error","getBinaryData","getObject","getData","endsWith","parse","toString","updateData","updateFunction","updatedData","deleteData","deleteObject","listObjects","prefix","listObjectsV2","Prefix","Contents","moveObject","fromKey","toKey","copyObject","CopySource","getSummaries","sessionStorage","getItem","summariesPath","summariesData","summaries","summary","summaryData","push","id","name","split","pop","content","timestamp","LastModified","getTime","type","sort","a","b","getPresignedUrl","pdfId","fileName","includes","url","getSignedUrl","Expires","wasabiStorage"],"sources":["D:/dadas/he true randomizer/theta/src/services/WasabiStorage.js"],"sourcesContent":["import AWS from 'aws-sdk';\n\n// Initialize the Wasabi storage service\n// Note: In a real implementation, these credentials would be stored securely \n// and potentially fetched from environment variables or a backend service\nclass WasabiStorage {\n  constructor() {\n    console.log('========== WASABI STORAGE INITIALIZED ==========');\n    console.log('USING WASABI CLOUD STORAGE - NOT USING LOCALSTORAGE');\n    console.log(`Bucket: thetatest, Endpoint: https://s3.us-west-1.wasabisys.com`);\n    \n    // Configure the Wasabi connection\n    this.s3 = new AWS.S3({\n      endpoint: 'https://s3.us-west-1.wasabisys.com',\n      accessKeyId: 'W7X9U7PACFCWQZHRJBRH',\n      secretAccessKey: 'Xc3tkWt1W0tGSMhEN3w6WTPJNsOlWYuhtirgV9Dc',\n      region: 'us-west-1',\n      s3ForcePathStyle: true, // Required for Wasabi\n    });\n    \n    this.bucket = 'thetatest';\n\n    // Initialize base folders\n    this.initializeFolders();\n    \n    // Never fall back to localStorage\n    this.useLocalStorage = false;\n    \n    // Test connection during initialization but don't fall back\n    this.testConnection();\n    \n    console.log('==============================================');\n  }\n  \n  // Initialize the folder structure\n  async initializeFolders() {\n    try {\n      const folders = [\n        'teacher-approval/',\n        'student-approval/',\n        'Skyline/',\n        'Skyline/teachers/',\n        'Skyline/students/'\n      ];\n\n      await Promise.all(folders.map(folder => \n        this.s3.putObject({\n          Bucket: this.bucket,\n          Key: folder,\n          Body: '',\n          ContentType: 'application/x-directory'\n        }).promise()\n      ));\n\n      return true;\n    } catch (error) {\n      console.error('Error initializing folders:', error);\n      return false;\n    }\n  }\n\n  // Path helpers\n  getTeacherPath(schoolName, email) {\n    return `${schoolName}/teachers/${email}/info.json`;\n  }\n\n  getPendingTeacherPath(email) {\n    return `teacher-approval/${email}.json`;\n  }\n\n  getPendingStudentPath(email) {\n    return `student-approval/${email}.json`;\n  }\n\n  getStudentPath(schoolName, email) {\n    return `${schoolName}/students/${email}/info.json`;\n  }\n\n  getTeacherClassesPath(schoolName, email) {\n    return `${schoolName}/teachers/${email}/classes/`;\n  }\n\n  getClassPath(schoolName, teacherEmail, classCode) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/info.json`;\n  }\n\n  getRecordingsPath(schoolName, teacherEmail, classCode) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/recordings/`;\n  }\n\n  getRecordingPath(schoolName, teacherEmail, classCode, recordingId) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/recordings/${recordingId}.json`;\n  }\n\n  getSummariesPath(schoolName, teacherEmail, classCode) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/summaries/`;\n  }\n\n  getSummaryPath(schoolName, teacherEmail, classCode, summaryId) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/summaries/${summaryId}.json`;\n  }\n\n  getClassJoinRequestPath(schoolName, teacherEmail, classCode, studentEmail) {\n    return `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/join-requests/${studentEmail}.json`;\n  }\n\n  getSchoolPath(schoolName) {\n    return `${schoolName}/info.json`;\n  }\n\n  getSchoolsListPath() {\n    return 'schools.json';\n  }\n\n  // Test the Wasabi connection\n  async testConnection() {\n    try {\n      console.log('Testing Wasabi connection...');\n      // Check if bucket exists\n      const response = await this.s3.headBucket({ Bucket: this.bucket }).promise();\n      console.log('Wasabi connection successful:', response);\n      return true;\n    } catch (error) {\n      console.error('Wasabi connection test failed:', error.message, error.code);\n      // Don't fall back to localStorage - just report the error\n      console.error('WARNING: Wasabi storage is not working but fallback is disabled');\n      return false;\n    }\n  }\n  \n  // Save data to Wasabi\n  async saveData(key, data) {\n    try {\n      console.log(`Attempting to save data to Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n        Body: JSON.stringify(data),\n        ContentType: 'application/json',\n      };\n      \n      const response = await this.s3.putObject(params).promise();\n      console.log('Wasabi save successful:', response);\n      return { success: true, response };\n    } catch (error) {\n      console.error('Detailed error saving to Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to save to Wasabi: ${error.message}`);\n    }\n  }\n  \n  // Get binary data from Wasabi (for files like ZIP)\n  async getBinaryData(key) {\n    try {\n      console.log(`Attempting to get binary data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n      };\n      \n      const response = await this.s3.getObject(params).promise();\n      console.log('Wasabi get successful');\n      return response.Body;\n    } catch (error) {\n      if (error.code === 'NoSuchKey') {\n        console.log('Key not found in Wasabi, returning null');\n        return null;\n      }\n      console.error('Detailed error getting from Wasabi:', error.message, error.code, error.statusCode);\n      throw new Error(`Failed to get data from Wasabi: ${error.message}`);\n    }\n  }\n\n  // Get data from Wasabi\n  async getData(key) {\n    try {\n      console.log(`Attempting to get data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n      };\n      \n      const response = await this.s3.getObject(params).promise();\n      console.log('Wasabi get successful');\n      \n      // If the key ends with .json, parse it as JSON\n      if (key.endsWith('.json')) {\n        return JSON.parse(response.Body.toString());\n      }\n      // Otherwise return the raw buffer\n      return response.Body;\n    } catch (error) {\n      if (error.code === 'NoSuchKey') {\n        console.log('Key not found in Wasabi, returning null');\n        return null;\n      }\n      console.error('Detailed error getting from Wasabi:', error.message, error.code, error.statusCode);\n      throw new Error(`Failed to get data from Wasabi: ${error.message}`);\n    }\n  }\n  \n  // Update specific data in Wasabi\n  async updateData(key, updateFunction) {\n    let data = await this.getData(key);\n    \n    // If data doesn't exist yet, initialize with empty object or array\n    if (!data) {\n      data = typeof updateFunction(null) === 'object' ? {} : [];\n    }\n    \n    // Apply the update function to modify the data\n    const updatedData = updateFunction(data);\n    \n    // Save the updated data back to Wasabi\n    return await this.saveData(key, updatedData);\n  }\n  \n  // Delete data from Wasabi\n  async deleteData(key) {\n    try {\n      console.log(`Attempting to delete data from Wasabi. Key: ${key}, Bucket: ${this.bucket}`);\n      const params = {\n        Bucket: this.bucket,\n        Key: key,\n      };\n      \n      const response = await this.s3.deleteObject(params).promise();\n      console.log('Wasabi delete successful:', response);\n      return { success: true, response };\n    } catch (error) {\n      console.error('Detailed error deleting from Wasabi:', error.message, error.code, error.statusCode);\n      // Don't fall back to localStorage\n      throw new Error(`Failed to delete from Wasabi: ${error.message}`);\n    }\n  }\n\n  async listObjects(prefix) {\n    const data = await this.s3.listObjectsV2({\n      Bucket: this.bucket,\n      Prefix: prefix\n    }).promise();\n    return data.Contents || [];\n  }\n\n  async deleteObject(key) {\n    await this.s3.deleteObject({\n      Bucket: this.bucket,\n      Key: key\n    }).promise();\n  }\n\n  // Move an object from one location to another\n  async moveObject(fromKey, toKey) {\n    try {\n      // Copy the object to the new location\n      await this.s3.copyObject({\n        Bucket: this.bucket,\n        CopySource: `${this.bucket}/${fromKey}`,\n        Key: toKey\n      }).promise();\n\n      // Delete the object from the old location\n      await this.deleteObject(fromKey);\n\n      console.log(`Successfully moved object from ${fromKey} to ${toKey}`);\n    } catch (error) {\n      console.error('Error moving object:', error);\n      throw error;\n    }\n  }\n\n  async getSummaries(teacherEmail, classCode) {\n    try {\n      const schoolName = sessionStorage.getItem('userSchool');\n      if (!schoolName) {\n        throw new Error('School information not found');\n      }\n\n      const summariesPath = this.getSummariesPath(schoolName, teacherEmail, classCode);\n      const summariesData = await this.listObjects(summariesPath);\n      const summaries = [];\n\n      for (const summary of summariesData) {\n        if (summary.Key.endsWith('.json')) {\n          try {\n            const summaryData = await this.s3.getObject({\n              Bucket: this.bucket,\n              Key: summary.Key\n            }).promise();\n            \n            summaries.push(JSON.parse(summaryData.Body.toString()));\n          } catch (error) {\n            console.error('Error reading summary file:', summary.Key, error);\n          }\n        } else if (summary.Key.endsWith('.pdf')) {\n          // For PDFs, create a summary object with the file info\n          summaries.push({\n            id: summary.Key,\n            name: summary.Key.split('/').pop(),\n            content: summary.Key, // Store the path to the PDF\n            timestamp: summary.LastModified.getTime(),\n            type: 'pdf'\n          });\n        }\n      }\n\n      // Sort summaries by date, newest first\n      summaries.sort((a, b) => b.timestamp - a.timestamp);\n      return summaries;\n    } catch (error) {\n      console.error('Error getting summaries:', error);\n      return [];\n    }\n  }\n\n  async getPresignedUrl(schoolName, teacherEmail, classCode, pdfId) {\n    try {\n        // Extract just the filename from the full path if it's a full path\n        const fileName = pdfId.includes('/') ? pdfId.split('/').pop() : pdfId;\n        const key = `${schoolName}/teachers/${teacherEmail}/classes/${classCode}/summaries/${fileName}`;\n        const url = this.s3.getSignedUrl('getObject', {\n            Bucket: this.bucket,\n            Key: key,\n            Expires: 3600 // URL expires in 1 hour\n        });\n        return url;\n    } catch (error) {\n        console.error('Error generating pre-signed URL:', error);\n        return null;\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst wasabiStorage = new WasabiStorage();\nexport default wasabiStorage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}